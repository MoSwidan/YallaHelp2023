<div class="w-100 row text-center bg-white m-0 rounded-bottom p-2" style="font-size:13px;">
    <div class="col-6 text-end p-0">
        @CommentsCount
        <span>تعليق</span>
    </div>
    <div class="col-6 text-start p-0">
        @LikesList?.Data?.Count
        <span>أعجبني</span>
    </div>
</div>
<div class="w-100 row text-center bg-white m-0 rounded-bottom p-2  border-top">
    <div class="col-6 text-center" style="cursor:pointer;" onclick="document.getElementById('@(PostId.ToString()+_app.AccountData.User_Id.ToString())').classList.toggle('d-none')">
        <i class="fal fa-comment-dots ps-2 fs-5"></i>
        <span style="font-size: 14px;">التعليقات</span>
    </div>
    @if (_app.AccountData.First_Name != null)
    {
        <div class="col-6 text-center border-right @(CheckLike == true ? "text-primary":" ")" style="cursor:pointer;" @onclick="ToggleLike">
            <i class="@(CheckLike == true ? "fa":"fal") fa-thumbs-up ps-2 fs-5"></i>
            <span style="font-size: 14px;">أعجبني</span>
        </div>
    }
    else
    {
        <div class="col-6 text-center border-right" @onclick='()=>_alert.ShowAlert("قم بتسجيل الدخول أولا","warn")'>
            <i class="fal fa-thumbs-up ps-2 fs-5" style="opacity:0.4;"></i>
            <span style="opacity:0.4;font-size: 14px;">أعجبني</span>
        </div>
    }

</div>
<Comments PostId="PostId" @ref="@comment" />

@code {
    [Parameter]
    public Guid PostId { get; set; }
    private bool ShowData = false;
    Comments comment = new Comments();
    public int CommentsCount { get; set; }
    private bool CheckLike = false;
    public int? LikesCount { get; set; }
    private LikeResponse? LikesList = new LikeResponse();
    protected override void OnInitialized()
    {
        _app.OnChange += StateHasChanged;
        base.OnInitialized();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (PostId != null)
        {
            await GetPostLikes();
        }
        await comment.GetPostComments();
        if (comment.CommentsList.Data != null)
        {
            CommentsCount = comment.CommentsList.Data.Count;
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task GetPostLikes()
    {
        try
        {
            @if (PostId != null)
            {
                LikesList = await Http.GetFromJsonAsync<LikeResponse>($"api/Like/GetPostLikes?postid={PostId}");
                if (LikesList?.Code == "200")
                {
                    if (LikesList?.Data?.Count > 0)
                    {
                        var checkuserlike = LikesList?.Data?.Where(x => x.User_Id == _app.UserAuthData.User_Id).First().User_Id;
                        if (checkuserlike != null)
                        {
                            CheckLike = true;
                        }
                        else
                        {
                            CheckLike = false;
                        }
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
            
        }
        catch (Exception ex)
        {

        }

    }
    private async Task ToggleLike()
    {
        try
        {
            Like like = new Like
            {
                Post_Id = PostId,
                User_Id = _app.AccountData.User_Id,
                TimeStamp = $"{DateTime.Now.ToLongDateString()} {DateTime.Now.ToLongTimeString()}",
                Like_Id = new Guid()
            };
            var response = await Http.PostAsJsonAsync<Like>("api/Like/AddPostLikes", like);
            var responseStatusCode = response.StatusCode;
            var responseBody = await response.Content.ReadAsStringAsync();
            if (!string.IsNullOrWhiteSpace(responseBody))
            {
                var deserilaize = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResponse>(responseBody);
                if (deserilaize.Code == "200")
                {
                    if (deserilaize.Meassage == "Add")
                    {
                        _alert.ShowAlert("تم إضافة إعجاب للمنشور", "done");
                        CheckLike = true;
                    }else if (deserilaize.Meassage == "Remove")
                    {
                        _alert.ShowAlert("تم إلغاء الاعجاب بالمنشور", "done");
                        CheckLike = false;
                    }
                    await GetPostLikes();
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    Console.WriteLine(deserilaize.Meassage);
                    Console.WriteLine(deserilaize.Code);
                    _alert.ShowAlert($"حدث خطاء", "error");
                }
            }
        }
        catch (Exception ex)
        {
            
        }
    }
}
