@inherits LayoutComponentBase
@using System.Data;
@using YallaHelp2023.Models;
@if (IsLoaded)
{
    <Alert />
    @if (_app.Loading)
    {
        <Loading />
    }
    <div class="container-fluid px-0 m-0 @(_app.Loading  == true ? "d-none":"")">
        @Body
    </div>
    @if (!_app.Loading)
    {
        <Footer />
    }
    
}
else
{
    <div class="container-fluid text-center" style="height:100vh;overflow:hidden;">
        <div class="row justify-content-center align-content-center h-100 align-items-center" style="overflow:hidden;">
            <lottie-player src="animations/heartbeat.json" speed="1" style="width:220px; height:220px;" loop autoplay></lottie-player>
            <div class="position-absolute fs-5 fw-bold slide-top mt-4" style="top:65vh; left:auto;"> لا تتوقف أبدا عن مساعدة الاخرين </div>
        </div>
    </div>
   
}

@code{
    private static bool IsLoaded = false;
    public async Task Loading()
    {
        await Task.Delay(5000);
        IsLoaded = true;
        await InvokeAsync(StateHasChanged);
    }
    protected override async void OnInitialized()
    {
        _app.OnChange += StateHasChanged;
        await Loading();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                var user = await localStorage.GetItemAsync<string>("usdat");
                if (user != null)
                {
                    var decrypt = await Crypto.DecryptAsync<Account>(user);
                    if (decrypt.Phone_Number != null)
                    {
                        await _app.AutoLogUser(decrypt);
                        var google = await localStorage.GetItemAsync<string>("google");
                        NotificationModel notificationModel = new NotificationModel
                        {
                            DeviceId = google,
                            IsAndroiodDevice = true,
                            Title = "YallaHelp",
                            Body = "تسجيل دخول أوتوماتيكي"
                        };
                        var response = await Http.PostAsJsonAsync<NotificationModel>("api/notification/send", notificationModel);
                        var responseStatusCode = response.StatusCode;
                        var responseBody = await response.Content.ReadAsStringAsync();
                        if (!string.IsNullOrWhiteSpace(responseBody))
                        {
                            var deserilaize = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(responseBody);
                            if (deserilaize.IsSuccess)
                            {
                                _alert.ShowAlert("تم", "done");
                            }
                            else
                            {
                                _alert.ShowAlert($" خطاء", "error");
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                
                throw;
            }
        }
    }
}