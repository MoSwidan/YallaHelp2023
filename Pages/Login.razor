@page "/LogIn"
<div class="container-fluid py-4 px-md-4 px-0" dir="rtl">
	<div class="row justify-content-center   align-items-center w-100 m-auto h-100 text-center">
		<div style="background:#fd1b5b;" class="col-md-6 col-xl-5  d-md-flex d-none  h-100 p-md-4 p-xl-5 shadow  flex-column justify-content-center rounded-right">
			<img style="height:100%;width:100%;"  src="assets/images/logins.svg"/>
		</div>
		<div class="col-md-6 col-xl-5 col-11 p-1 py-5 bg-white rounded-left shadow d-flex flex-column align-items-center justify-content-around h-100">
			<h1 class="fw-bold fs-1">تسجيل الدخول</h1>
			<div class="row justify-content-center  p-2 p-md-5" style="width:90%;">
				<input @bind="PhoneNumber" @bind:event="oninput" class="fw-bold mb-3 border-0 p-2 w-100 text-center shadow-sm rounded text-dark" style="background:#eee;" type="number" placeholder="رقم الهاتف" />
				<input @bind="Password" @bind:event="oninput" class="fw-bold border-0 p-2 w-100 text-center shadow-sm rounded text-dark" style="background:#eee;" type="password" placeholder="كلمة المرور" />
			</div>
			<button @onclick="Auth" class="w-25 border-0 rounded p-2 text-white" style="background:#fd1b5b; cursor:pointer;">تأكيد</button>
			<div class="justify-content-center w-100 p-2">
				<p class="" style="cursor:pointer;">نسيت كلمة المرور؟</p>
				<p @onclick='()=>{Nv.NavigateTo("/SignUp");}'  class="mt-2" style="color:#fd1b5b; cursor:pointer;">مستخدم جديد</p>
			</div>
		</div>
		
	</div>
</div>
@code {
	private string PhoneNumber = "";
	private string Password = "";
	private async Task Auth()
	{

		AccountResponse result = new AccountResponse();
		if (String.IsNullOrEmpty(PhoneNumber) || String.IsNullOrEmpty(Password))
		{
			_alert.ShowAlert("املاء البيانات الفارغه", "warn");
		}
		else
		{
			_app.Loading = true;
			_app.NotifyStateChanged();
			result = await Http.GetFromJsonAsync<AccountResponse>($"api/User/CheckUserRegistration?PhoneNumber={PhoneNumber}");
			if (result.Code == "200")
			{
				if (result.Data.Password == Password)
				{
					_alert.ShowAlert("تم تسجيل الدخول", "done");
					_app.UserAuthData = result.Data;
					await GetUserData();
					await localStorage.SetItemAsync("usdat", (await Crypto.EncryptAsync(new Account { Phone_Number = result.Data.Phone_Number, Password = result.Data.Password, User_Id = result.Data.User_Id })).Value);
					Nv.NavigateTo("/Blog");
				}
				else
				{
					_alert.ShowAlert("كلمة المرور غير صحيحه", "warn");
				}
			}
			else
			{
				_alert.ShowAlert("هذا المستخدم غير مسجل ", "warn");
			}

		}
		await Task.Delay(1000);
		_app.Loading = false;
		_app.NotifyStateChanged();
	}
	private async Task GetUserData()
	{
		try
		{
			UserResponse? result = new UserResponse();
			result = await Http.GetFromJsonAsync<UserResponse>($"api/User/UserData?UserId={_app.UserAuthData.User_Id}");
			if (result.Code == "200")
			{
				_app.AccountData = result.Data;
				_app.NotifyStateChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
}